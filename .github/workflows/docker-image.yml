name: Deploy Spring Boot to Linux Server

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    # tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  
permissions:
  contents: read
  packages: write
  # This is used to complete the identity challenge
  # with sigstore/fulcio when running outside of PRs.
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v2

      # 设置 JDK 版本
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 使用 Maven 构建项目
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 上传构建的 JAR 文件到服务器
      # - name: Deploy to Server
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SERVER_HOST: ${{ secrets.SERVER_HOST }}
      #     SERVER_USER: ${{ secrets.SERVER_USER }}
      #     PROJECT_NAME: "my-spring-boot-app" # 设置你的项目名
      #     JAR_PATH: "./build/libs/my-spring-boot-app-0.0.1-SNAPSHOT.jar" # 替换为实际的 JAR 路径
      #   run: |
      #     # 配置 SSH 密钥
      #     mkdir -p ~/.ssh
      #     echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa

      #     # 将 JAR 文件上传到服务器
      #     scp -o StrictHostKeyChecking=no $JAR_PATH $SERVER_USER@$SERVER_HOST:/root/$PROJECT_NAME.jar

      #     # 在服务器上启动/重启应用
      #     ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
      #       # 杀掉已有的 Spring Boot 进程
      #       if pgrep -f "$PROJECT_NAME.jar"; then
      #         pkill -f "$PROJECT_NAME.jar"
      #       fi

      #       # 启动应用
      #       nohup java -jar /home/$SERVER_USER/$PROJECT_NAME.jar > /home/$SERVER_USER/$PROJECT_NAME.log 2>&1 &
      #     EOF
          
  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
        
      - name: multiple command
        uses: appleboy/ssh-action@master
        env:
          SSH_PRIVATE_KEY: ${{ secrets.KEY }}
          SERVER_HOST: ${{ secrets.HOST }}
          SERVER_USER: ${{ secrets.USERNAME }}
          PROJECT_NAME: "ruoyi-wms" # 设置你的项目名
          JAR_PATH: "./target/ruoyi-wms-5.2.0.jar" # 替换为实际的 JAR 路径
        with:
          host: $SERVER_HOST
          username: $SERVER_USER
          key: $SSH_PRIVATE_KEY
          port: 51268
          script_stop: true
          sync: true
          script: |
            scp -o StrictHostKeyChecking=no -P 51268 $JAR_PATH $SERVER_USER@$SERVER_HOST:/root/$PROJECT_NAME.jar
            ssh -o StrictHostKeyChecking=no -P 51268 $SERVER_USER@$SERVER_HOST << 'EOF'
              if pgrep -f "$PROJECT_NAME.jar"; then
                pkill -f "$PROJECT_NAME.jar"
              fi
              nohup java -jar /root/$PROJECT_NAME.jar > /root/$PROJECT_NAME.log 2>&1 &
            EOF
